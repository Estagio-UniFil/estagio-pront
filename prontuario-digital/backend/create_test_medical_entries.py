import os
import django
from datetime import datetime, timedelta
import random

# Configura o ambiente Django
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "medicalrecord.settings")
django.setup()

from medicalentry.models import MedicalEntry
from students.models import Student
from authentication.models import User


def create_test_medical_entries():
    """
    Cria entradas m√©dicas de teste com IDs espec√≠ficos para testar o sistema de filtros.

    Usa:
    - Estudante: e90dd50a-a471-4c5a-9489-12485719eaf3
    - Fisioterapeuta: 8f174b26-686d-42fb-9d87-e1f7bf0c7200
    - Psic√≥logo: 8f174b26-686d-42fb-9d87-e1f7bf0c7200
    """

    # IDs espec√≠ficos fornecidos
    STUDENT_ID = "e90dd50a-a471-4c5a-9489-12485719eaf3"
    PHYSIOTHERAPIST_ID = "8f174b26-686d-42fb-9d87-e1f7bf0c7200"
    PSYCHOLOGIST_ID = "8f174b26-686d-42fb-9d87-e1f7bf0c7200"

    try:
        # Buscar o estudante
        student = Student.objects.get(id=STUDENT_ID)
        print(f"Estudante encontrado: {student}")

        # Buscar os profissionais
        physiotherapist = User.objects.get(id=PHYSIOTHERAPIST_ID)
        psychologist = User.objects.get(id=PSYCHOLOGIST_ID)

        print(f"Fisioterapeuta encontrado: {physiotherapist}")
        print(f"Psic√≥logo encontrado: {psychologist}")

        # Verificar se t√™m health_profile
        if hasattr(physiotherapist, "health_profile"):
            print(
                f"Especialidade do fisioterapeuta: {physiotherapist.health_profile.specialty}"
            )
        else:
            print("AVISO: Fisioterapeuta n√£o possui health_profile")

        if hasattr(psychologist, "health_profile"):
            print(
                f"Especialidade do psic√≥logo: {psychologist.health_profile.specialty}"
            )
        else:
            print("AVISO: Psic√≥logo n√£o possui health_profile")

    except Student.DoesNotExist:
        print(f"ERRO: Estudante com ID {STUDENT_ID} n√£o encontrado")
        return
    except User.DoesNotExist as e:
        print(f"ERRO: Profissional n√£o encontrado: {e}")
        return

    # Dados para entradas de fisioterapia
    physiotherapy_entries = [
        {
            "description": "Avalia√ß√£o inicial - Dor lombar cr√¥nica",
            "notes": "Paciente relata dor h√° 6 meses. Limita√ß√£o de movimento. Indicado fortalecimento muscular.",
        },
        {
            "description": "Sess√£o de fortalecimento muscular",
            "notes": "Exerc√≠cios para core e gl√∫teos. Paciente apresentou boa evolu√ß√£o na amplitude de movimento.",
        },
        {
            "description": "Terapia manual - Mobiliza√ß√£o articular",
            "notes": "T√©cnicas de mobiliza√ß√£o para coluna lombar. Redu√ß√£o significativa da dor relatada.",
        },
        {
            "description": "Exerc√≠cios funcionais e propriocep√ß√£o",
            "notes": "Trabalho de equil√≠brio e coordena√ß√£o. Paciente demonstra melhora na estabilidade postural.",
        },
        {
            "description": "Reavalia√ß√£o - Progresso do tratamento",
            "notes": "Melhora de 70% no quadro √°lgico. Amplitude de movimento normalizada. Alta programada.",
        },
    ]

    # Dados para entradas de psicologia
    psychology_entries = [
        {
            "description": "Primeira consulta - Avalia√ß√£o psicol√≥gica",
            "notes": "Paciente apresenta sintomas de ansiedade generalizada. Hist√≥rico de estresse acad√™mico.",
        },
        {
            "description": "Sess√£o de terapia cognitivo-comportamental",
            "notes": "Trabalho com t√©cnicas de reestrutura√ß√£o cognitiva. Identifica√ß√£o de pensamentos disfuncionais.",
        },
        {
            "description": "T√©cnicas de relaxamento e mindfulness",
            "notes": "Ensino de t√©cnicas de respira√ß√£o e relaxamento muscular progressivo. Boa ades√£o do paciente.",
        },
        {
            "description": "Terapia de exposi√ß√£o gradual",
            "notes": "Trabalho com situa√ß√µes que geram ansiedade. Hierarquia de exposi√ß√£o estabelecida.",
        },
        {
            "description": "Sess√£o de follow-up",
            "notes": "Paciente relata redu√ß√£o significativa dos sintomas ansiosos. Estrat√©gias de enfrentamento consolidadas.",
        },
        {
            "description": "Avalia√ß√£o de progresso terap√™utico",
            "notes": "Melhora substancial no quadro. Paciente demonstra maior autoconfian√ßa e controle emocional.",
        },
    ]

    # Lista para armazenar todas as entradas
    new_entries = []

    # Data base para as entradas (√∫ltimos 60 dias)
    base_date = datetime.now() - timedelta(days=60)

    # Criar entradas de fisioterapia
    print("\nCriando entradas de fisioterapia...")
    for i, entry_data in enumerate(physiotherapy_entries):
        # Distribuir as entradas ao longo do tempo
        entry_date = base_date + timedelta(
            days=random.randint(0, 30),
            hours=random.randint(8, 17),
            minutes=random.randint(0, 59),
        )

        entry = MedicalEntry(
            student=student,
            healthpro=physiotherapist,
            description=entry_data["description"],
            notes=entry_data["notes"],
            entry_date=entry_date,
        )
        new_entries.append(entry)
        print(f"  - {entry_data['description']}")

    # Criar entradas de psicologia
    print("\nCriando entradas de psicologia...")
    for i, entry_data in enumerate(psychology_entries):
        # Distribuir as entradas ao longo do tempo (mais recentes)
        entry_date = base_date + timedelta(
            days=random.randint(15, 45),
            hours=random.randint(8, 17),
            minutes=random.randint(0, 59),
        )

        entry = MedicalEntry(
            student=student,
            healthpro=psychologist,
            description=entry_data["description"],
            notes=entry_data["notes"],
            entry_date=entry_date,
        )
        new_entries.append(entry)
        print(f"  - {entry_data['description']}")

    # Salvar todas as entradas no banco
    try:
        MedicalEntry.objects.bulk_create(new_entries)
        print(f"\n‚úÖ SUCESSO: {len(new_entries)} entradas m√©dicas criadas!")
        print(f"   - {len(physiotherapy_entries)} entradas de fisioterapia")
        print(f"   - {len(psychology_entries)} entradas de psicologia")
        print(f"   - Todas para o estudante: {student}")

        # Verificar se as entradas foram criadas corretamente
        total_entries = MedicalEntry.objects.filter(
            student=student, deleted=False
        ).count()
        physio_entries = MedicalEntry.objects.filter(
            student=student, healthpro=physiotherapist, deleted=False
        ).count()
        psych_entries = MedicalEntry.objects.filter(
            student=student, healthpro=psychologist, deleted=False
        ).count()

        print(f"\nüìä VERIFICA√á√ÉO:")
        print(f"   - Total de entradas do estudante: {total_entries}")
        print(f"   - Entradas do fisioterapeuta: {physio_entries}")
        print(f"   - Entradas do psic√≥logo: {psych_entries}")

    except Exception as e:
        print(f"\n‚ùå ERRO ao salvar entradas: {e}")


def clean_test_entries():
    """
    Remove todas as entradas de teste criadas anteriormente (opcional)
    """
    STUDENT_ID = "e90dd50a-a471-4c5a-9489-12485719eaf3"

    try:
        student = Student.objects.get(id=STUDENT_ID)
        deleted_count = MedicalEntry.objects.filter(student=student).delete()[0]
        print(f"üóëÔ∏è  {deleted_count} entradas removidas para o estudante {student}")
    except Student.DoesNotExist:
        print(f"Estudante com ID {STUDENT_ID} n√£o encontrado")


if __name__ == "__main__":
    print("üè• Script de Cria√ß√£o de Entradas M√©dicas de Teste")
    print("=" * 50)

    # Descomente a linha abaixo se quiser limpar entradas anteriores
    # clean_test_entries()

    # Criar as novas entradas de teste
    create_test_medical_entries()

    print("\n‚ú® Script executado com sucesso!")
